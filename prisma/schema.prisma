// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza19iQ1Rjb3ZfemoyUnBua3Y0OWRBaHEiLCJhcGlfa2V5IjoiMDFLMVk1OEhSRUdSQkhHR05IVjVLTTlYQUMiLCJ0ZW5hbnRfaWQiOiI3NDYzZGY5YzM1YWQ5Y2YzZDJmYmM4OWNhN2NhMjQyODI0ZDkwZjRhMjgxN2U4Y2JmY2VlNzEwNjViYzQ1YzI3IiwiaW50ZXJuYWxfc2VjcmV0IjoiY2FhNDI2ZmEtZmQ5OS00OGVkLTlkMTctYjcyNDZmNmQ4YThjIn0.J2o_tJNitzjTiRjRtGqPvv9b_CR05JhUJ5m4Nfx3S0U"
}

model Campus {
  id          String      @id @default(cuid())
  name        String
  challenges  Challenge[]
  users       User[]
  submissions Submission[]
  leaderboards Leaderboard[]
}

model User {
  id            String      @id @default(cuid())
  username      String      @unique
  phoneNumber   String      @unique
  name          String
  passwordHash  String
  campusId      String
  campus        Campus      @relation(fields: [campusId], references: [id])
  submissions   Submission[]
  streak        Int         @default(0)
  createdAt     DateTime    @default(now())
}

model Challenge {
  id            String      @id @default(cuid())
  campusId      String
  campus        Campus      @relation(fields: [campusId], references: [id])
  title         String
  description   String
  hint          String?
  mediaUrl      String?
  scheduledAt   DateTime
  expiresAt     DateTime
  isBonus       Boolean     @default(false)
  submissions   Submission[]
  createdAt     DateTime    @default(now())
  @@index([campusId, scheduledAt])
}

model Submission {
  id            String      @id @default(cuid())
  userId        String
  challengeId   String
  campusId      String
  campus        Campus      @relation(fields: [campusId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  challenge     Challenge   @relation(fields: [challengeId], references: [id])
  mediaUrl      String
  verified      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  verifiedAt    DateTime?
  rank          Int?        // 1 for first finisher, etc.
  pointsAwarded Int?        // filled when verified
  @@index([challengeId, createdAt])
}

model Leaderboard {
  id        String   @id @default(cuid())
  campusId  String
  campus    Campus   @relation(fields: [campusId], references: [id])
  period    String   // "daily" | "weekly" | "overall"
  startDate DateTime
  endDate   DateTime
  entries   Json     // [{ userId, points }]
  updatedAt DateTime @updatedAt
}
